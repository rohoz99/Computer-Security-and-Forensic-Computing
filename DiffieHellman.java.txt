import java.util.ArrayList;
import java.util.List;
import java.math.BigInteger;

public class DiffieHellman{

    public static void main(String[] args){
        long p = generatePrime();
        System.out.println("p = " + p);

        System.out.println("Finding a primitive root for "+p);
        long a = generatePrimitiveRoot(p);
        System.out.println("Primitive Root: "+a);
        
        
        long AlicesPrivateKey = generatePrivateKey(p);
        long BobsPrivateKey = generatePrivateKey(p);

        System.out.println("Alice's private key(XA): " +AlicesPrivateKey);
        System.out.println("Bob's private key(XB): " +BobsPrivateKey);
        
        BigInteger AlicesGenerated = generatorMethod(a, p, AlicesPrivateKey);
        BigInteger BobsGenerated = generatorMethod(a, p, BobsPrivateKey);

        System.out.println("Public Key Generated by Alice(YA): "+AlicesGenerated);
        System.out.println("Public Key Generated by Bob(YB): "+BobsGenerated);

        BigInteger kAlice = generatorMethod(BobsGenerated.longValue(), p, AlicesPrivateKey);
        BigInteger kBob = generatorMethod(AlicesGenerated.longValue(), p, BobsPrivateKey);

        System.out.println("K generated by Alice using Bob's public key: " + kAlice);
        System.out.println("K generated by Bob using Alice's public key: " + kBob);

    }


    //method to generate a random prime between 10^4 and 10^5
    public static long generatePrime(){
        long prime = 0;
        boolean isPrime = false;

        while(!isPrime){
            prime = (long) Math.floor(Math.random()*(10000-1000+1)+1000);
            isPrime = isPrime(prime);
        }
        return prime;
    }

    //Method to check if a number is prime
    public static boolean isPrime(long number){
        boolean isPrime = true;
        for (int i = 2; i <= number / 2; ++i) {
            if (number % i == 0) {
              isPrime = false;
              break;
            }
          }
        return isPrime;
    }

    //method to generate a primitive root
    public static long generatePrimitiveRoot(long N){
        boolean primitiveFound = false;
        long primitive =2;
        while(!primitiveFound){
            //primitive = (long) Math.floor(Math.random()*((N-1)-1+1)+1);
            // System.out.println(primitive);
            //check if it is a primitive root
            if(isPrimitiveRoot(primitive, N)){
                primitiveFound = true;
            }
            else{
                primitive++;
            }
        }
        return primitive;
    }

    // method to test if a number is a primitive root of N
    public static boolean isPrimitiveRoot(long primitive, long N){
        List<BigInteger> answers = new ArrayList<>();

        System.out.println("Checking if "+primitive +" is a primitive root!");

        //for each number(i) less than N calculate primitive^i mod N 
        for(long i=0; i<N-1; i++){
            BigInteger pow = pow(primitive, i+1);
            pow = pow.mod(BigInteger.valueOf(N));
            
            //if the result is already in the list, then it is not a primitive root of N
            if(answers.contains(pow)){
                answers.add(pow);
                return false;
            }
            else{
                answers.add(pow);
            }
        }
        System.out.println(primitive+" is a primitive root!");
        return true;
    }

    //method to calculate the result of a number to the power of another number
    public static BigInteger pow(long value, long power){
        if (power == 0) return BigInteger.valueOf(1);
        BigInteger ans = BigInteger.valueOf(value);
        while(power>1){
            ans = ans.multiply(BigInteger.valueOf(value));
            power--;
        }
        return ans;
    }

    // generate a random number less than p
    public static long generatePrivateKey(long p){
        return (long) Math.floor(Math.random()*((p-1)-1+1)+1);
    }

    //Method to calculate a^x mod p
    public static BigInteger generatorMethod(long a, long p, long x){
        BigInteger Y;
        BigInteger pow = pow(a,x);
        Y = pow.mod(BigInteger.valueOf(p));
        return Y;
    }
}